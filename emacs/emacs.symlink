;; -*- lexical-binding: t -*-
(require 'package)
(setq package-list
      '(
        better-defaults
        cider
        clojure-mode
        evil-magit
        evil-org
        evil-paredit
        flycheck
        magit
        org
        paredit
        python-mode
        elpy
        ))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)

; fetch list of available packages
(unless package-archive-contents
  (package-refresh-contents))

;; Install all packages
(defun install-all-packages ()
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package))))

(install-all-packages)

;; MODE ENABLING
; Set evil mode
(require 'evil)
(evil-mode 1)
(require 'evil-magit)
; org mode
(require 'org)
(setq org-log-done t)
; Evil org
(require 'evil-org)
;; enable flycheck always
(global-flycheck-mode)

;; GLOBAL CONFIG
; No wrap
(set-default 'truncate-lines t)
; C indent
(setq-default c-basic-offset 4)



;; GLOBAL KEY MAPPING
; C-hjkl for window movement
(define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
(define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
(define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
(define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
; gg to top of file
(global-set-key (kbd "C-x C-x") 'beginning-of-buffer)
; gf to find file
(global-set-key (kbd "C-x f") 'ido-find-file)
; C-z suspends emacs
(define-key evil-normal-state-map (kbd "C-z") nil)
(define-key evil-normal-state-map (kbd "C-z") 'suspend-frame)

;;; C-c gets out of insertmode
(defun my-esc (prompt)
  "Functionality for escaping generally.  Includes exiting Evil insert state and C-g binding. "
  (cond
   ;; If we're in one of the Evil states that defines [escape] key, return [escape] so as
   ;; Key Lookup will use it.
   ((or (evil-insert-state-p) (evil-normal-state-p) (evil-replace-state-p) (evil-visual-state-p)) [escape])
   ;; This is the best way I could infer for now to have C-c work during evil-read-key.
   ;; Note: As long as I return [escape] in normal-state, I don't need this.
   ;;((eq overriding-terminal-local-map evil-read-key-map) (keyboard-quit) (kbd ""))
   (t (kbd "C-g"))))
(define-key key-translation-map (kbd "C-c") 'my-esc)
;; Works around the fact that Evil uses read-event directly when in operator state, which
;; doesn't use the key-translation-map.
(define-key evil-operator-state-map (kbd "C-c") 'keyboard-quit)

; Function for key translations only in normal mode, motion, and visual
;; Note: lexical-binding must be t in order for this to work correctly.
(defun make-conditional-key-translation (key-from key-to translate-keys-p)
       "Make a Key Translation such that if the translate-keys-p function returns true,
   key-from translates to key-to, else key-from translates to itself.  translate-keys-p
   takes key-from as an argument. "
       (define-key key-translation-map key-from
	 (lambda (prompt)
	   (if (funcall translate-keys-p key-from) key-to key-from))))
(defun my-translate-keys-p (key-from)
  "Returns whether conditional key translations should be active.  See make-conditional-key-translation function. "
   (or (evil-motion-state-p) (evil-normal-state-p) (evil-visual-state-p)))

;; Define , as c-c
(make-conditional-key-translation (kbd ",") (kbd "C-c") 'my-translate-keys-p)
;; g as C-x
(make-conditional-key-translation (kbd "g") (kbd "C-x") 'my-translate-keys-p)

; Paredit bindings
(defun local-paredit-keys ()
  (local-set-key (kbd "C-x )") 'paredit-forward-slurp-sexp)
  (local-set-key (kbd "C-x (") 'paredit-forward-barf-sexp)
  (local-set-key (kbd "C-c W") 'paredit-wrap-round)
  (local-set-key (kbd "C-c w [") 'paredit-wrap-square)
  )

;; Clojure setup
; Paredit
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'clojure-mode-hook 'enable-paredit-mode)
(add-hook 'scheme-mode-hook 'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
(add-hook 'emacs-lisp-mode-hook 'evil-paredit-mode)
(add-hook 'clojure-mode-hook 'evil-paredit-mode)


; Emacs Lisp
(defun emacs-lisp-mode-config ()
  (enable-paredit-mode)
  (local-set-key (kbd "C-x p") 'eval-last-sexp)
  (define-key evil-normal-state-local-map (kbd "K") 'describe-function)
  (local-set-key (kbd "C-x v") 'describe-variable)
  (define-key evil-normal-state-map (kbd "q") 'delete-other-windows)
  (local-paredit-keys))
(add-hook 'emacs-lisp-mode-hook 'emacs-lisp-mode-config)

; Python mode config
(defun python-mode-config ()
  (elpy-enable)
  (elpy-use-ipython)
  (define-key evil-normal-state-local-map (kbd "K") 'elpy-doc)
  (define-key evil-insert-state-local-map  (kbd "C-p") 'completion-at-point)
  )
(add-hook 'python-mode-hook 'python-mode-config)

; Clojure major mode keybindings
(defun clojure-mode-config ()
  (local-set-key (kbd "C-x p") 'cider-eval-last-sexp)
  (define-key undo-tree-map (kbd "C-x r") nil) ; already defined in undo-tree
  (local-set-key (kbd "C-x r") 'cider-switch-to-repl-buffer)
  (enable-paredit-mode)
  (local-set-key (kbd "C-x j") 'cider-jack-in)
  (local-set-key (kbd "C-x n") 'cider-repl-set-ns)
  (define-key evil-normal-state-local-map (kbd "K") 'cider-doc)
  (local-set-key (kbd "C-x k") 'cider-load-buffer)
  (local-set-key (kbd "C-x t") 'cider-test-run-test)
  (local-paredit-keys))
(add-hook 'clojure-mode-hook 'clojure-mode-config)

; CIDER
(add-hook
  'cider-repl-mode-hook
  (lambda ()
    (local-set-key (kbd "C-x r") 'cider-switch-to-last-clojure-buffer)
    (define-key evil-normal-state-map (kbd "q") 'cider-popup-buffer-quit-function)
    (evil-emacs-state)))

; 4clojure mode
(defun 4clojure-mode ()
  (local-set-key (kbd "C-c n") '4clojure-next-question)
  (local-set-key (kbd "C-c c") '4clojure-check-answers)
  (local-set-key (kbd "C-c p") '4clojure-previous-question))

; Customize interface variables
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
