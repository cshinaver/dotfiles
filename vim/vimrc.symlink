set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo

" Fugitive, git interface for vim
Plugin 'tpope/vim-fugitive'

" Vim-repeat, repeat much more than simple inserts or deletes
Plugin 'tpope/vim-repeat'

" ctrlp.vim
Plugin 'kien/ctrlp.vim'

" Gundo, Visualizeand traverse your undo tree
Plugin 'sjl/gundo.vim'

Plugin 'scrooloose/syntastic'

" Vim-colors-solarized, Solarized color scheme
Plugin 'altercation/vim-colors-solarized'

" vim-tmux-navigator
Plugin 'christoomey/vim-tmux-navigator'

" rust.vim
Plugin 'rust-lang/rust.vim'

" emmet-vim (html)
Plugin 'mattn/emmet-vim'

" textobj-indent
Plugin 'michaeljsmith/vim-indent-object'

" Surround
Plugin 'tpope/vim-surround'

" Vim airline
"Plugin 'bling/vim-airline'

" Vimux
Plugin 'benmills/vimux'

" Vim-test
Plugin 'janko-m/vim-test'

" vim-javascript
Plugin 'pangloss/vim-javascript'

" vim-jsx
Plugin 'mxw/vim-jsx'

" Flake8
"Plugin 'nvie/vim-flake8'

" NERD tree
Plugin 'scrooloose/nerdtree'

"CoffeeScript
Plugin 'kchmck/vim-coffee-script'

" vim-objc
Plugin 'b4winckler/vim-objc'

" Clojure
Plugin 'guns/vim-clojure-static' " syntax highlighting/indentation
Plugin 'tpope/vim-fireplace' " REPL and dynamic development
Plugin 'vim-scripts/paredit.vim' " Paredit
Plugin 'venantius/vim-eastwood' " Syntax checking
Plugin 'venantius/vim-cljfmt' " Style reformatting

" Markdown vim
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" dispatch
Plugin 'tpope/vim-dispatch'

" unimparied
Plugin 'tpope/vim-unimpaired'

" vim syntax extra
Plugin 'justinmk/vim-syntax-extra'

" Snippets
" Plugin 'MarcWeber/vim-addon-mw-utils'
" Plugin 'tomtom/tlib_vim'
" Plugin 'garbas/vim-snipmate'

" Optional
" Plugin 'honza/vim-snippets'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

syntax on
let mapleader=","
filetype indent plugin on

" .vimrc quick edits

" Map localleader to ,
let maplocalleader = ','

" Allow project specific .exrc files
set exrc
set secure

" emmet leader key is
let g:user_emmet_leader_key=','
" Emmet only works for html/css files
let g:user_emmet_install_global = 0
autocmd FileType html,htmldjango,css EmmetInstall

" %% expands to curdir
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
nmap <silent> <leader>ez :e ~/.zshrc<CR>
nmap <silent> <leader>sz :!source ~/.zshrc<CR>

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
nmap <silent> ,/ :nohlsearch<CR>

"nnoremap <buffer> <F9> :exec '!python' shellescape(@%, 1)<cr>
map <F8> :Errors<CR>
" Set backspace
set backspace=eol,start,indent

"" Theme
"if has('gui_running')
"    set background=dark
"else
"    set background=dark
"endif
"set t_Co=16
"let g:solarized_termcolors=16
"colorscheme solarized

" Syntastic
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_c_checkers = ['gcc']
let g:syntastic_cpp_checkers = ['gcc']
let g:syntastic_cpp_compiler_options = '-std=c++11'
let g:syntastic_cpp_check_header = 1
let g:syntastic_perl_checkers = ['perl']
let g:syntastic_enable_perl_checker = 1

" Auto loc list opening
let g:syntastic_auto_loc_list = 0

" Paste toggle
set pastetoggle=<F2>

" Line numbers
set nu

" Default formatting
set textwidth=79  " lines longer than 79 columns will be broken
set shiftwidth=4  " operation >> indents 4 columns; << unindents 4 columns
set tabstop=4     " an hard TAB displays as 4 columns
set expandtab     " insert spaces when hitting TABs
set softtabstop=4 " insert/delete 4 spaces when hitting a TAB/BACKSPACE
set shiftround    " round indent to multiple of 'shiftwidth'
set autoindent    " align the new line indent with the previous line
"set nowrap        " don't wrap lines
set copyindent    " copies previous indentation on autoindenting
set number        " always show line numbers
set relativenumber " also show relative line numbers
set showmatch     " shows matching parenthesis
set ignorecase    " ignore case when searching
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type
set undolevels=1000      " many undo levels
set title                " change terminal title
set nobackup
set noswapfile

" Visual mode
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" YCM default
let g:ycm_global_ycm_extra_conf = "~/.dotfiles/vim/ycm_extra_conf.py"

" Ctags
map <f12> :!/usr/local/bin/ctags -R . &> /dev/null &<cr>


fun! MatchCaseTag()
  let ic = &ic
  set noic
  try
    exe 'tjump ' . expand('<cword>')
  finally
    let &ic = ic
  endtry
endfun

nnoremap <silent> :call MatchCaseTag()<CR>

" End Ctags

" Vim airline

" Always show status bar
"set laststatus=2
" Use powerline fonts
let g:airline_powerline_fonts = 1

" remove arrows
let g:airline_left_sep=''
let g:airline_right_sep=''

" Show tabs
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" Vimux

" Vimux propt command
nmap <leader>vp :VimuxPromptCommand<CR>

nmap <leader>vq :VimuxCloseRunner<CR>

" vim-test

" Run tests with vimux
let test#strategy = "vimux"

" Run python tests with nose
let test#python#runner = 'nose'

" map vim-test keys
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

" vim-jsx
let g:syntastic_javascript_checkers = ['jsxhint']

" delete fugitive:// buffers after leaving them
autocmd BufReadPost fugitive://* set bufhidden=delete

" Strip trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" .. moves to head of fugitive branch only in fugitive
autocmd User fugitive
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif


" Ctrl P
" ignore *pyc* files
let g:ctrlp_custom_ignore = {
    \ 'file': '\v[\/].*pyc$',
    \ 'dir': '\v[\/].*node_module.*',
    \ }

" Map CtrlPTag to CTRL T
nnoremap <C-t> :CtrlPTag<CR>

" F9 runs Exuberant Ctags
nmap <F9> :!ctags -R .<CR><CR>

" Custom .vimrc in home directory
if filereadable($HOME."/.vimrc.custom")
    so $HOME/.vimrc.custom
endif

" Fold level none
set nofoldenable

" ejs reads as html
au BufRead,BufNewFile *.ejs set filetype=html
